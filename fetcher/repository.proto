syntax = "proto3";

package fetcher;

option go_package = "github.com/stuttgart-things/sweatShop-fetcher";

// Repository is a repository holding application configurations
message Repository {
    // Repo contains the URL to the remote repository
    string repo = 1;

    // Username contains the user name used for authenticating at the remote repository
    string username = 2;

    // Password contains the password or PAT used for authenticating at the remote repository
    string password = 3;

    // Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys
    optional bool insecure = 4;
  }

  // ListFilesRequest requests a repository directory structure
  message ListFilesRequest {
      Repository repo = 1;
      string revision = 2;
      string path = 3;
  }

  // FileList returns the contents of the repo of a ListFiles request
  message FileList {
      repeated  string files = 1;
  }

  // TestRepositoryRequest is a query to test repository is valid or not and has valid access.
  message TestRepositoryRequest {
      Repository repo = 1;
  }

  // TestRepositoryResponse represents the TestRepository response
  message TestRepositoryResponse {
      // Request to verify the signature when generating the manifests (only for Git repositories)
      bool verifiedRepository = 1;
  }

  // RepoServerService
  service RepoServerService {

      // ListFiles returns a list of files in the repo
      rpc ListFiles(ListFilesRequest) returns (FileList) {
      }

      // Returns a bool val if the repository is valid and has proper access
      rpc TestRepository(TestRepositoryRequest) returns (TestRepositoryResponse) {
      }
  }
